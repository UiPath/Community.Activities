<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AffectedRecordsDescription" xml:space="preserve">
    <value>SQL 명령의 실행 결과입니다. UPDATE, INSERT 및 DELETE 문의 경우, 반환 값은 명령에 의해 영향을 받는 행의 수입니다. 기타 모든 문에서는 -1이 반환됩니다.</value>
  </data>
  <data name="CategoryDatabase" xml:space="preserve">
    <value>데이터베이스</value>
  </data>
  <data name="CommandTypeDescription" xml:space="preserve">
    <value>명령 문자열이 해석되는 방법을 지정합니다.</value>
  </data>
  <data name="ConnectionStringDescription" xml:space="preserve">
    <value>데이터베이스를 연결하기 위해 사용되는 연결 문자열</value>
  </data>
  <data name="DatabaseConnectDescription" xml:space="preserve">
    <value>데이터베이스에 연결합니다.</value>
  </data>
  <data name="DatabaseConnectionDescription" xml:space="preserve">
    <value>이 액티비티 내의 작업에서 사용되는 데이터베이스 연결</value>
  </data>
  <data name="DatabaseDisconnectDescription" xml:space="preserve">
    <value>데이터베이스로의 연결을 끊습니다.</value>
  </data>
  <data name="DataTableDescription" xml:space="preserve">
    <value>DataTable 객체에 래핑된 SQL 명령의 출력</value>
  </data>
  <data name="DbTransactionDescription" xml:space="preserve">
    <value>데이터베이스를 연결하고 DatabaseConnection을 반환하여 데이터베이스 액티비티에 대한 범위를 제공합니다. UseTransaction가 True로 설정되면 포함된 작업이 단일 트랜잭션에서 실행되며 실패한 작업이 없는 경우 마지막에 적용됩니다. UseTransaction가 False로 설정되면 모든 작업이 개별적으로 커밋됩니다. 이 액티비티가 종료되면 데이터베이스로의 연결이 끊깁니다.</value>
  </data>
  <data name="DefaultWidth" xml:space="preserve">
    <value>300</value>
  </data>
  <data name="ExecuteNonQueryDescription" xml:space="preserve">
    <value>데이터베이스에서 SQL 문을 실행합니다. UPDATE, INSERT 및 DELETE 문의 경우, 반환 값은 명령에 의해 영향을 받는 행의 수입니다. 기타 모든 문에서는 -1이 반환됩니다.</value>
  </data>
  <data name="ExecuteQueryDescription" xml:space="preserve">
    <value>데이터베이스에서 쿼리를 실행하고 데이터 테이블의 쿼리 결과를 반환합니다.</value>
  </data>
  <data name="ExistingDbConnectionDescription" xml:space="preserve">
    <value>이미 열린 데이터베이스 연결입니다. 이 속성이 연결 문자열로 설정되면 제공자 이름 속성이 무시됩니다.</value>
  </data>
  <data name="InsertDataTableDescription" xml:space="preserve">
    <value>기존 테이블에서 호환되는 DataTable을 삽입합니다. 영향을 받는 행의 수를 반환합니다.</value>
  </data>
  <data name="ParametersDescription" xml:space="preserve">
    <value>SQL 명령으로 바인딩된 이름이 지정된 파라미터의 딕셔너리입니다. 바인딩은 SQL 명령에 &apos;@parameterName&apos; 문을 지정하여 수행됩니다. 런타임 시에 parameterName이 딕셔너리의 값으로 대체됩니다.</value>
  </data>
  <data name="ProviderNameDescription" xml:space="preserve">
    <value>데이터베이스에 액세스하기 위해 사용되는 데이터베이스 제공자의 이름입니다. 전체 데이터 제공자는 http://msdn.microsoft.com/en-us/library/a6cd7c08(v=vs.100).aspx에서 확인할 수 있습니다.</value>
  </data>
  <data name="SqlDescription" xml:space="preserve">
    <value>실행될 SQL 명령입니다.</value>
  </data>
  <data name="TableNameDescription" xml:space="preserve">
    <value>대상 데이터베이스 테이블</value>
  </data>
  <data name="TimeoutMSDescription" xml:space="preserve">
    <value>오류가 throw되기 전에 SQL 명령이 실행되기 위해 대기하는 시간(밀리초)을 지정합니다. 기본값은 30000밀리초(30초)이며 이 값은 0 이상이어야 합니다.</value>
  </data>
  <data name="UseTransactionDescription" xml:space="preserve">
    <value>이 액티비티의 데이터베이스 작업이 데이터베이스 트랜잭션에서 래핑되어야 하는지의 여부를 지정합니다.</value>
  </data>
  <data name="AffectedRecordsInsertDescription" xml:space="preserve">
    <value>삽입된 행 수</value>
  </data>
  <data name="ConfigureConnection" xml:space="preserve">
    <value>연결 구성...</value>
  </data>
  <data name="InserDataTableInputDescription" xml:space="preserve">
    <value>테이블에 삽입될 DataTable 객체입니다. DataTable 열 설명은 데이터베이스 테이블의 열과 일치해야 합니다.</value>
  </data>
  <data name="ConnectionWizard" xml:space="preserve">
    <value>연결 마법사</value>
  </data>
  <data name="DoubleClickToView" xml:space="preserve">
    <value>두 번 클릭하여 보기</value>
  </data>
  <data name="EditConnectionSettings" xml:space="preserve">
    <value>연결 설정 편집</value>
  </data>
  <data name="EditQuery" xml:space="preserve">
    <value>쿼리 편집...</value>
  </data>
  <data name="NewDatabaseConnection" xml:space="preserve">
    <value>새 데이터베이스 연결</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>매개 변수</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>표시 이름</value>
    <comment>property name</comment>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>연결 문자열</value>
  </data>
  <data name="DatabaseConnection" xml:space="preserve">
    <value>데이터베이스 연결</value>
  </data>
  <data name="DataTable" xml:space="preserve">
    <value>데이터 테이블</value>
  </data>
  <data name="DropActivityHere" xml:space="preserve">
    <value>여기에 액티비티 놓기</value>
  </data>
  <data name="EditSql" xml:space="preserve">
    <value>SQL 편집</value>
  </data>
  <data name="ExistingDatabaseConnection" xml:space="preserve">
    <value>기존 데이터베이스 연결</value>
  </data>
  <data name="SqlQueryHint" xml:space="preserve">
    <value>SQL 쿼리입니다. 텍스트를 따옴표로 묶어야 합니다.</value>
  </data>
  <data name="TableNameHint" xml:space="preserve">
    <value>테이블 이름입니다. 텍스트를 따옴표로 묶어야 합니다.</value>
  </data>
  <data name="QueryTimeoutMSDescription" xml:space="preserve">
    <value>오류가 throw되기 전에 SQL 쿼리가 실행하기 위해 대기해야 하는 시간(밀리초)을 지정합니다(쿼리 결과를 검색하기 위한 응답 시간 제외). 기본값은 30000밀리초(30초)이며 이 값은 0 이상이어야 합니다.</value>
  </data>
  <data name="CategoryAppIntegration" xml:space="preserve">
    <value>앱 통합</value>
  </data>
  <data name="CollectionLabel" xml:space="preserve">
    <value>(컬렉션)</value>
  </data>
  <data name="ContinueOnError" xml:space="preserve">
    <value>ContinueOnError 부울</value>
  </data>
  <data name="BulkInsert_DataTable" xml:space="preserve">
    <value>DataTable</value>
  </data>
  <data name="BulkInsert_DataTable_Description" xml:space="preserve">
    <value>삽입할 항목에 대한 소스 DataTable입니다.</value>
  </data>
  <data name="BulkInsert_DataTable_Placeholder" xml:space="preserve">
    <value>소스 DataTable</value>
  </data>
  <data name="BulkInsert_TableName" xml:space="preserve">
    <value>테이블 이름</value>
  </data>
  <data name="BulkInsert_TableName_Description" xml:space="preserve">
    <value>항목을 삽입할 데이터베이스 테이블의 이름입니다.</value>
  </data>
  <data name="BulkInsert_TableName_Placeholder" xml:space="preserve">
    <value>대상 데이터베이스 테이블 이름</value>
  </data>
  <data name="BulkUpdate_ColumnNames" xml:space="preserve">
    <value>일치하는 행에 사용되는 열</value>
  </data>
  <data name="BulkUpdate_ColumnNames_Placeholder" xml:space="preserve">
    <value>행 일치에 사용되는 열 이름의 컬렉션</value>
  </data>
  <data name="BulkUpdateDescription" xml:space="preserve">
    <value>기존 테이블에서 호환되는 DataTable을 업데이트합니다. 기본 키로 사용되는 열 이름의 컬렉션에 없는 모든 열을 업데이트합니다. 영향을 받는 행의 수를 반환합니다.</value>
  </data>
  <data name="AffectedRecordsUpdateDescription" xml:space="preserve">
    <value>업데이트된 행 수</value>
  </data>
  <data name="BulkFlagDescription" xml:space="preserve">
    <value>True인 경우 대량 삽입을 사용하여 임시 테이블을 생성하고 테이블 간 조인을 사용하여 업데이트하십시오. 그렇지 않으면, 대량 업데이트가 일괄적으로 실행됩니다.</value>
  </data>
  <data name="UpdateDataTableInputDescription" xml:space="preserve">
    <value>테이블을 업데이트할 때 사용할 DataTable 개체입니다. DataTable 열 설명은 데이터베이스 테이블의 열과 일치하며 해당 테이블의 하위 집합이어야 합니다.</value>
  </data>
  <data name="BulkInsertDescription" xml:space="preserve">
    <value>특정 데이터베이스 드라이버 구현을 사용하여 일괄 작업을 사용하는 테이블을 업데이트합니다. 데이터베이스 드라이버가 일괄 작업을 지원하지 않는 경우 데이터 테이블 삽입으로 대체됩니다.</value>
  </data>
  <data name="ConnectionSecureStringDescription" xml:space="preserve">
    <value>데이터베이스 연결을 보안 문자열로 설정하기 위해 사용되는 연결 문자열</value>
  </data>
  <data name="ActivitySynonymDatabaseConnect" xml:space="preserve">
    <value>연결</value>
  </data>
  <data name="ActivitySynonymDatabaseDisconnect" xml:space="preserve">
    <value>연결 끊기</value>
  </data>
  <data name="ActivitySynonymExecuteNonQuery" xml:space="preserve">
    <value>쿼리가 아닌 항목 실행</value>
  </data>
  <data name="ActivitySynonymExecuteQuery" xml:space="preserve">
    <value>쿼리 실행</value>
  </data>
</root>