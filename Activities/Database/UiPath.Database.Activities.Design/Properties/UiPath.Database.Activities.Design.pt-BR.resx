<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AffectedRecordsDescription" xml:space="preserve">
    <value>O resultado da execução do comando sql. Para instruções ATUALIZAR, INSERIR e EXCLUIR, o valor de retorno é o número de linhas afetadas pelo comando. Para todos os outros tipos de instruções, o valor de retorno é -1.</value>
  </data>
  <data name="CategoryDatabase" xml:space="preserve">
    <value>Banco de dados</value>
  </data>
  <data name="CommandTypeDescription" xml:space="preserve">
    <value>Especifica como uma string de comando é interpretada</value>
  </data>
  <data name="ConnectionStringDescription" xml:space="preserve">
    <value>A string de conexão usada para estabelecer uma conexão de banco de dados</value>
  </data>
  <data name="DatabaseConnectDescription" xml:space="preserve">
    <value>Conecta-se a um banco de dados.</value>
  </data>
  <data name="DatabaseConnectionDescription" xml:space="preserve">
    <value>A conexão de banco de dados usada para as operações dentro desta atividade</value>
  </data>
  <data name="DatabaseDisconnectDescription" xml:space="preserve">
    <value>Encerra uma conexão com um banco de dados.</value>
  </data>
  <data name="DataTableDescription" xml:space="preserve">
    <value>A saída do comando sql envolvido em um objeto DataTable</value>
  </data>
  <data name="DbTransactionDescription" xml:space="preserve">
    <value>Conecta-se a um banco de dados e retorna uma DatabaseConnection, fornecendo um escopo para as atividades de Banco de dados. Se UseTransaction estiver definido como verdadeiro, as operações contidas serão executadas em uma única transação e aplicadas no final, se nenhuma delas falhar. Se UseTransaction estiver definido como falso, todas as operações serão confirmadas individualmente. Quando esta atividade termina, a conexão com o banco de dados é encerrada.</value>
  </data>
  <data name="DefaultWidth" xml:space="preserve">
    <value>300</value>
  </data>
  <data name="ExecuteNonQueryDescription" xml:space="preserve">
    <value>Executa uma instrução SQL em um banco de dados. Para instruções ATUALIZAR, INSERIR e EXCLUIR, o valor de retorno é o número de linhas afetadas pelo comando. Para todos os outros tipos de instruções, o valor de retorno é -1.</value>
  </data>
  <data name="ExecuteQueryDescription" xml:space="preserve">
    <value>Executa uma consulta em um banco de dados e retorna o resultado da consulta em uma Tabela de Dados.</value>
  </data>
  <data name="ExistingDbConnectionDescription" xml:space="preserve">
    <value>Uma conexão de banco de dados já aberta. Se esta propriedade estiver configurada, as propriedades Connection String e Provider Name serão ignoradas</value>
  </data>
  <data name="InsertDataTableDescription" xml:space="preserve">
    <value>Insere uma DataTable compatível em uma Tabela existente. Retorna o número de linhas afetadas.</value>
  </data>
  <data name="ParametersDescription" xml:space="preserve">
    <value>Um dicionário de parâmetros nomeados que estão vinculados ao comando sql. A vinculação é feita especificando a instrução &apos;@parameterName&apos; no comando sql. Em tempo de execução, o parameterName será substituído por seu valor do dicionário</value>
  </data>
  <data name="ProviderNameDescription" xml:space="preserve">
    <value>O nome do provedor usado para acessar o banco de dados. Uma lista de Provedores de Dados pode ser encontrada em http://msdn.microsoft.com/en-us/library/a6cd7c08(v=vs.100).aspx</value>
  </data>
  <data name="SqlDescription" xml:space="preserve">
    <value>Um comando sql a ser executado.</value>
  </data>
  <data name="TableNameDescription" xml:space="preserve">
    <value>A tabela de banco de dados de destino</value>
  </data>
  <data name="TimeoutMSDescription" xml:space="preserve">
    <value>Especifica o tempo (em milissegundos) a ser aguardado para que o comando sql seja executado antes de gerar um erro. O valor padrão é 30.000 milissegundos (30 segundos) e deve ser maior ou igual a 0.</value>
  </data>
  <data name="UseTransactionDescription" xml:space="preserve">
    <value>Especifica se as operações de banco de dados dentro desta atividade devem ser envolvidas em uma transação de banco de dados</value>
  </data>
  <data name="AffectedRecordsInsertDescription" xml:space="preserve">
    <value>O número de linhas inseridas</value>
  </data>
  <data name="ConfigureConnection" xml:space="preserve">
    <value>Configurar Conexão...</value>
  </data>
  <data name="InserDataTableInputDescription" xml:space="preserve">
    <value>O objeto DataTable a ser inserido na Tabela. A descrição das colunas DataTable deve corresponder às colunas da tabela do banco de dados</value>
  </data>
  <data name="ConnectionWizard" xml:space="preserve">
    <value>Assistente de Conexão</value>
  </data>
  <data name="DoubleClickToView" xml:space="preserve">
    <value>Clique duas vezes para exibir</value>
  </data>
  <data name="EditConnectionSettings" xml:space="preserve">
    <value>Editar Configurações de Conexão</value>
  </data>
  <data name="EditQuery" xml:space="preserve">
    <value>Editar Consulta...</value>
  </data>
  <data name="NewDatabaseConnection" xml:space="preserve">
    <value>Nova Conexão do Banco de dados</value>
  </data>
  <data name="Parameters" xml:space="preserve">
    <value>Parâmetros</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>DisplayName</value>
    <comment>property name</comment>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>String de Conexão</value>
  </data>
  <data name="DatabaseConnection" xml:space="preserve">
    <value>Conexão do banco de dados</value>
  </data>
  <data name="DataTable" xml:space="preserve">
    <value>Tabela de Dados</value>
  </data>
  <data name="DropActivityHere" xml:space="preserve">
    <value>Soltar atividade aqui</value>
  </data>
  <data name="EditSql" xml:space="preserve">
    <value>Editar Sql</value>
  </data>
  <data name="ExistingDatabaseConnection" xml:space="preserve">
    <value>Conexão do Banco de dados Existente</value>
  </data>
  <data name="SqlQueryHint" xml:space="preserve">
    <value>Consulta sql. O texto deve estar entre aspas</value>
  </data>
  <data name="TableNameHint" xml:space="preserve">
    <value>Nome da tabela. O texto deve estar entre aspas</value>
  </data>
  <data name="QueryTimeoutMSDescription" xml:space="preserve">
    <value>Especifica o tempo (em milissegundos) a ser aguardado para que a consulta sql seja executada antes de gerar um erro (não inclui o tempo de resposta para a recuperação do resultado da consulta). O valor padrão é 30.000 milissegundos (30 segundos) e deve ser maior ou igual a 0.</value>
  </data>
  <data name="CategoryAppIntegration" xml:space="preserve">
    <value>Integração do Aplicativo</value>
  </data>
  <data name="CollectionLabel" xml:space="preserve">
    <value>(Coleção)</value>
  </data>
  <data name="ContinueOnError" xml:space="preserve">
    <value>ContinueOnError Boolean</value>
  </data>
  <data name="BulkInsert_DataTable" xml:space="preserve">
    <value>DataTable</value>
  </data>
  <data name="BulkInsert_DataTable_Description" xml:space="preserve">
    <value>A DataTable de origem dos itens a serem inseridos.</value>
  </data>
  <data name="BulkInsert_DataTable_Placeholder" xml:space="preserve">
    <value>DataTable de Origem</value>
  </data>
  <data name="BulkInsert_TableName" xml:space="preserve">
    <value>Nome da tabela</value>
  </data>
  <data name="BulkInsert_TableName_Description" xml:space="preserve">
    <value>O nome da tabela do banco de dados na qual você deseja inserir os itens.</value>
  </data>
  <data name="BulkInsert_TableName_Placeholder" xml:space="preserve">
    <value>Nome da tabela de destino no banco de dados</value>
  </data>
  <data name="BulkUpdate_ColumnNames" xml:space="preserve">
    <value>Colunas usadas para linhas correspondentes</value>
  </data>
  <data name="BulkUpdate_ColumnNames_Placeholder" xml:space="preserve">
    <value>O conjunto de nomes de colunas usados na correspondência de linhas</value>
  </data>
  <data name="BulkUpdateDescription" xml:space="preserve">
    <value>Atualiza uma DataTable compatível em uma Tabela existente. Atualizará todas as colunas que não fazem parte do conjunto de nomes de coluna usado como chave primária. Retorna o número de linhas afetadas.</value>
  </data>
  <data name="AffectedRecordsUpdateDescription" xml:space="preserve">
    <value>O número de linhas atualizadas</value>
  </data>
  <data name="BulkFlagDescription" xml:space="preserve">
    <value>Se for true, criará uma tabela temporária usando Inserção em massa e atualizará com a junção entre tabelas, do contrário emitirá atualizações em massa em lote.</value>
  </data>
  <data name="UpdateDataTableInputDescription" xml:space="preserve">
    <value>O objeto DataTable que será usado para atualizar a Tabela. A descrição das colunas DataTable deve corresponder às colunas da tabela do banco de dados</value>
  </data>
  <data name="BulkInsertDescription" xml:space="preserve">
    <value>Atualizará uma tabela usando operações em massa com a implementação específica de driver do banco de dados. Realizará o fallback para Insert Data Table se o driver do banco de dados não for compatível com operações em massa.</value>
  </data>
  <data name="ConnectionSecureStringDescription" xml:space="preserve">
    <value>A string de conexão usada para estabelecer uma conexão de banco de dados como uma String Segura</value>
  </data>
</root>