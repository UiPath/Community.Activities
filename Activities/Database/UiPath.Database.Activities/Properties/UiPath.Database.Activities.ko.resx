<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AffectedRecordsDisplayName" xml:space="preserve">
    <value>AffectedRecords</value>
    <comment>property name</comment>
  </data>
  <data name="CommandTypeDisplayName" xml:space="preserve">
    <value>CommandType</value>
    <comment>property name</comment>
  </data>
  <data name="Common" xml:space="preserve">
    <value>공통</value>
  </data>
  <data name="Connection" xml:space="preserve">
    <value>연결</value>
  </data>
  <data name="ConnectionConfiguration" xml:space="preserve">
    <value>연결 구성</value>
  </data>
  <data name="ConnectionStringDisplayName" xml:space="preserve">
    <value>ConnectionString</value>
    <comment>property name</comment>
  </data>
  <data name="ContinueOnErrorDisplayName" xml:space="preserve">
    <value>ContinueOnError</value>
    <comment>property name</comment>
  </data>
  <data name="DatabaseConnectionDisplayName" xml:space="preserve">
    <value>DatabaseConnection</value>
    <comment>property name</comment>
  </data>
  <data name="DataTableDisplayName" xml:space="preserve">
    <value>데이터 테이블</value>
    <comment>property name</comment>
  </data>
  <data name="ExistingDbConnectionDisplayName" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Input" xml:space="preserve">
    <value>입력</value>
  </data>
  <data name="OutputDisplayName" xml:space="preserve">
    <value>Output</value>
    <comment>property name</comment>
  </data>
  <data name="ParametersDisplayName" xml:space="preserve">
    <value>Parameters</value>
    <comment>property name</comment>
  </data>
  <data name="ProviderNameDisplayName" xml:space="preserve">
    <value>ProviderName</value>
    <comment>property name</comment>
  </data>
  <data name="TableNameDisplayName" xml:space="preserve">
    <value>TableName</value>
    <comment>property name</comment>
  </data>
  <data name="TimeoutMSDisplayName" xml:space="preserve">
    <value>Timeout (milliseconds)</value>
    <comment>property name</comment>
  </data>
  <data name="TimeoutMSException" xml:space="preserve">
    <value>TimeoutMS의 입력 값은 0 이상이어야 합니다.</value>
  </data>
  <data name="UseTransactionDisplayName" xml:space="preserve">
    <value>UseTransaction</value>
    <comment>property name</comment>
  </data>
  <data name="Output" xml:space="preserve">
    <value>출력</value>
  </data>
  <data name="ColumnNamesDisplayName" xml:space="preserve">
    <value>ColumnNames</value>
    <comment>property name</comment>
  </data>
  <data name="ValidationError_ConnectionStringMustBeSet" xml:space="preserve">
    <value>연결 문자열 필드 중 하나만 사용할 수 있습니다.</value>
  </data>
  <data name="ConnectionSecureStringDisplayName" xml:space="preserve">
    <value>SecureConnectionString</value>
  </data>
  <data name="BulkUpdateFlag" xml:space="preserve">
    <value>대량/일괄 업데이트</value>
  </data>
  <data name="ValidationError_ConnectionMustBeSet" xml:space="preserve">
    <value>연결 중 1개만 사용할 수 있습니다.</value>
  </data>
  <data name="ValidationError_ConnectionMustNotBeNull" xml:space="preserve">
    <value>연결 중 1개 이상을 사용해야 합니다.</value>
  </data>
  <data name="ValidationError_ConnectionStringMustNotBeNull" xml:space="preserve">
    <value>연결 문자열 필드 중 1개 이상을 사용해야 합니다.</value>
  </data>
  <data name="ValidationError_ProviderNull" xml:space="preserve">
    <value>필수 액티비티 인수 &apos;ProviderName&apos;의 값이 입력되지 않았습니다.</value>
  </data>
  <data name="Activity_BulkInsert_Description" xml:space="preserve">
    <value>Updates a table using Bulk operations using the specific database driver implementation. Will fallback to Insert Data Table if the database driver does not support Bulk operations.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_BulkInsert_Name" xml:space="preserve">
    <value>Bulk Insert</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_AffectedRecords_Description" xml:space="preserve">
    <value>Stores the number of affected rows into an Int64 variable.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_AffectedRecords_Name" xml:space="preserve">
    <value>Affected Rows</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_DataTable_Description" xml:space="preserve">
    <value>The source DataTable for the items to be inserted.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_DataTable_Name" xml:space="preserve">
    <value>Data Table</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>An already open database connection. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>Property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_TableName_Description" xml:space="preserve">
    <value>The destination database table name.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkInsert_Property_TableName_Name" xml:space="preserve">
    <value>Table Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Description" xml:space="preserve">
    <value>Updates a compatible DataTable in an existing Table. The activity also updates all the columns that are not in the collection of column names used as a primary key. Returns the number of rows affected.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_BulkUpdate_Name" xml:space="preserve">
    <value>Bulk Update</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_AffectedRecords_Description" xml:space="preserve">
    <value>The number of updated rows.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_AffectedRecords_Name" xml:space="preserve">
    <value>Affected Rows</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_BulkUpdateFlag_Description" xml:space="preserve">
    <value>Check this box to enable the creation of a temp table using Bulk insert and to update using join between tables. Otherwise, bulk updates are issued in batch.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_BulkUpdateFlag_Name" xml:space="preserve">
    <value>Bulk/Batch Update</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ColumnNames_Description" xml:space="preserve">
    <value>The collection of column names used for row matching.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ColumnNames_Name" xml:space="preserve">
    <value>Column Names</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_DataTable_Description" xml:space="preserve">
    <value>The DataTable object that will be used in updating the table. The DataTable columns descriptions must match the columns from the database table and be a subset of them.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_DataTable_Name" xml:space="preserve">
    <value>Data Table</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>An already open database connection. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_TableName_Description" xml:space="preserve">
    <value>The target database table.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_BulkUpdate_Property_TableName_Name" xml:space="preserve">
    <value>Table Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseConnect_Description" xml:space="preserve">
    <value>Connects to a database by using a standard connection string.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_DatabaseConnect_Name" xml:space="preserve">
    <value>Connect</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_DatabaseConnection_Description" xml:space="preserve">
    <value>The database connection used for the operations within this activity.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_DatabaseConnection_Name" xml:space="preserve">
    <value>Database Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseConnect_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseDisconnect_Description" xml:space="preserve">
    <value>Closes a connection to a database.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_DatabaseDisconnect_Name" xml:space="preserve">
    <value>Disconnect</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_DatabaseDisconnect_Property_DatabaseConnection_Description" xml:space="preserve">
    <value>The database connection used for operations within this activity.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseDisconnect_Property_DatabaseConnection_Name" xml:space="preserve">
    <value>Database Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Description" xml:space="preserve">
    <value>Connects to a database and features a Sequence which can perform multiple transactions with the database. It returns a DatabaseConnection variable, providing a scope for Database activities.
If UseTransaction is set to True, the contained operations are executed in a single transaction, and applied at the end if none of the them failed. If UseTransaction is set to False, all operations are committed individually. When this activity ends, the connection to the database is closed.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Name" xml:space="preserve">
    <value>Start Transaction</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_DatabaseConnection_Description" xml:space="preserve">
    <value>The database connection variable returned by the activity. This can be subsequently used for other database operations.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_DatabaseConnection_Name" xml:space="preserve">
    <value>Database Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>The DatabaseConnection variable you want to use for connecting to a database. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored. Can be retrieved from other Database activities that have the DatabaseConnection field in the Output property section.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Exiting Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_UseTransaction_Description" xml:space="preserve">
    <value>Specifies if the database operations within this activity should be wrapped in a database transaction.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_DatabaseTransaction_Property_UseTransaction_Name" xml:space="preserve">
    <value>Use Transaction</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Description" xml:space="preserve">
    <value>Executes an non query statement on a database. For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Name" xml:space="preserve">
    <value>Execute Non Query</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_AffectedRecords_Description" xml:space="preserve">
    <value>The result of the execution of the sql command. For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For all other types of statements, the return value is -1.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_AffectedRecords_Name" xml:space="preserve">
    <value>Affected Records</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_CommandType_Description" xml:space="preserve">
    <value>Specifies how a command string is interpreted. The following options are available:
Text - Executes the query given in the SQL parameter.
StoredProcedure - Invokes the procedure name specified in the SQL parameter.
TableDirect - Invokes all records from a table.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_CommandType_Name" xml:space="preserve">
    <value>Command Type</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>An already open database connection. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_Parameters_Description" xml:space="preserve">
    <value>A dictionary of named parameters that are bound to the sql command. The binding is done by specifying the &apos;@parameterName&apos; statement in the sql command. At runtime the parameterName will be replaced with its value from the dictionary.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_Parameters_Name" xml:space="preserve">
    <value>Parameters</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_Sql_Description" xml:space="preserve">
    <value>An sql command to be executed. This field must be completed according to the selection from the CommandType property.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_Sql_Name" xml:space="preserve">
    <value>Sql</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_TimeoutMS_Description" xml:space="preserve">
    <value>Specifies the amount of time (in millisecond) to wait for the sql command to run before an error is thrown. The default value is 30000 milliseconds (30 seconds) and must be greater than or equal to 0.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteNonQuery_Property_TimeoutMS_Name" xml:space="preserve">
    <value>Timeout</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Description" xml:space="preserve">
    <value>Executes a query on a database and returns the query result in a Datatable.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Name" xml:space="preserve">
    <value>Execute Query</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_CommandType_Description" xml:space="preserve">
    <value>Specifies how a command string is interpreted. The following options are available:
Text - Executes the query given in the SQL parameter.
StoredProcedure - Invokes the procedure name specified in the SQL parameter.
TableDirect - Invokes all records from a table.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_CommandType_Name" xml:space="preserve">
    <value>Command Type</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_DataTable_Description" xml:space="preserve">
    <value>The output of the SQL command wrapped in a DataTable variable.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_DataTable_Name" xml:space="preserve">
    <value>Data Table</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>An already opened database connection obtained from the Connect or Start Transaction activities. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_Parameters_Description" xml:space="preserve">
    <value>A dictionary of named parameters that are bound to the sql command. The binding is done by specifying the &apos;@parameterName&apos; statement in the sql command. At runtime the parameterName will be replaced with its value from the dictionary.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_Parameters_Name" xml:space="preserve">
    <value>Parameters</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_Sql_Description" xml:space="preserve">
    <value>An sql command to be executed. This field must be completed according to the selection from the CommandType property.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_Sql_Name" xml:space="preserve">
    <value>Sql</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_TimeoutMS_Description" xml:space="preserve">
    <value>Specifies the amount of time (in millisecond) to wait for the sql command to run before an error is thrown. The default value is 30000 milliseconds (30 seconds) and must be greater than or equal to 0.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_ExecuteQuery_Property_TimeoutMS_Name" xml:space="preserve">
    <value>Timeout</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Description" xml:space="preserve">
    <value>Inserts a compatible DataTable variable in an existing Table. Returns the number of rows affected. If the constraints on the table aren&apos;t met, the activity will not be completed successfully and all the written rows will be saved.</value>
    <comment>activity description</comment>
  </data>
  <data name="Activity_InsertDataTable_Name" xml:space="preserve">
    <value>Insert</value>
    <comment>activity name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_AffectedRecords_Description" xml:space="preserve">
    <value>Stores the number of affected rows into an Int32 variable.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_AffectedRecords_Name" xml:space="preserve">
    <value>Affected Records</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ConnectionSecureString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection as Secure String.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ConnectionSecureString_Name" xml:space="preserve">
    <value>Secure Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ConnectionString_Description" xml:space="preserve">
    <value>The connection string used to establish a database connection.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ConnectionString_Name" xml:space="preserve">
    <value>Connection String</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ContinueOnError_Name" xml:space="preserve">
    <value>Continue On Error</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_DataTable_Description" xml:space="preserve">
    <value>The DataTable variable that will be inserted into the Table. The DataTable columns&apos; name and description must match the ones from the database table.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_DataTable_Name" xml:space="preserve">
    <value>Data Table</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ExistingDbConnection_Description" xml:space="preserve">
    <value>An already opened database connection obtained from the Connect or Start Transaction activities. If such a connection is provided, the ConnectionString and SecureConnectionString properties are ignored.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ExistingDbConnection_Name" xml:space="preserve">
    <value>Existing Connection</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ProviderName_Description" xml:space="preserve">
    <value>The name of the database provider used to access the database.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_ProviderName_Name" xml:space="preserve">
    <value>Provider Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_TableName_Description" xml:space="preserve">
    <value>The SQL table in which the data is to be inserted.</value>
    <comment>property description</comment>
  </data>
  <data name="Activity_InsertDataTable_Property_TableName_Name" xml:space="preserve">
    <value>Table Name</value>
    <comment>property name</comment>
  </data>
  <data name="Activity_BulkInsert_Property_ContinueOnError_Description" xml:space="preserve">
    <value>Specifies if the automation should continue even when the activity throws an error.</value>
    <comment>property description</comment>
  </data>
  <data name="Category_Other" xml:space="preserve">
    <value>Other</value>
    <comment>category name</comment>
  </data>
  <data name="Category_Principal" xml:space="preserve">
    <value>Principal</value>
    <comment>category name</comment>
  </data>
</root>