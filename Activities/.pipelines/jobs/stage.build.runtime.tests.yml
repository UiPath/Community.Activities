parameters:
  robotVersion: "23.10.6"
  studioProjectPath: ""

jobs:
- job: "BuildDatabaseRuntimeTests"
  displayName: "Run Database Runtime Tests"
  variables:
    IntegrationTestStudioPackPath: '$(System.ArtifactsDirectory)/Packages'
  timeoutInMinutes: 90
  pool:
    vmImage: windows-2022
  workspace:
    clean: outputs | resources | all

  steps:     
  - template: Testing/Automation/install.studio.steps.template.yml@automationTests
    parameters:
      installType: 'machine'
      studioVersion: ${{ parameters.robotVersion }}
      license: "7445-1270-1408-6250"
      studioCustomNugetFeeds: 'UiPath-Internal,https://uipath.pkgs.visualstudio.com/Public.Feeds/_packaging/UiPath-Internal/nuget/v3/index.json'

  - powershell: |
      echo "##vso[task.setvariable variable=studioPackagesPath]$env:ProgramFiles/UiPath/Studio/Packages"
      & "C:/Program Files/UiPath/Studio/UiRobot.exe" trace --enableLowLevel
    displayName: "Enable robot low level"
    failOnStderr: false

  - task: DownloadPipelineArtifact@2
    displayName: "Download Packages"
    inputs:
      artifact: "Packages"
      path: "$(studioPackagesPath)"

  - powershell: |
      if (Test-Path -Path "$(IntegrationTestStudioPackPath)") {
        Remove-Item -Path $(IntegrationTestStudioPackPath) -Force -Recurse
        Write-Host "Removed old packages" 
      }
      
      $file = (Get-Item -Path "$(studioPackagesPath)/UiPath.Database.Activities.*.nupkg" | select Name).Name
      $null = $file -match '(?<name>[^\d]+)(?<version>.*).nupkg'
      $pkgName, $pkgVersion = $Matches['name'].TrimEnd('.'), $Matches['version']

      mkdir $(IntegrationTestStudioPackPath)
      $seconds = ([System.DateTime]::Now - [System.DateTime]::Today).TotalSeconds -as [int]
      & "C:/Program Files/UiPath/Studio/UIRobot.exe" --version
      Write-Host " "
      
      $projectPath = Join-Path -Path "$(Build.SourcesDirectory)" -ChildPath "${{ parameters.studioProjectPath }}"
      Write-Host "Project Path = $projectPath"
      $project = (get-content "$projectPath" | ConvertFrom-Json)
      $project.name = $project.name.Replace("_portable", "").Replace("_windows", "") + "_portable"
      $project.dependencies.'UiPath.Database.Activities' = "[$pkgVersion]"
      
      Write-Host "Pack for portable " + $project.name
      echo $project.name
      $project.targetFramework = "Portable"
      $project | ConvertTo-JSon | Out-File  "$projectPath"
      
      $output = (& "C:/Program Files/UiPath/Studio/UiPath.Studio.CommandLine.exe" publish -p "$projectPath" -f "$(IntegrationTestStudioPackPath)" -v "$env:BUILD_BUILDID.0.$seconds")
      
      if (-Not $output.Contains("Project published successfully."))
      {
        echo "Sleep 1 minute"
        Start-Sleep -Seconds 60
        $output = (& "C:/Program Files/UiPath/Studio/UiPath.Studio.CommandLine.exe" publish -p "$projectPath" -f "$(IntegrationTestStudioPackPath)" -v "$env:BUILD_BUILDID.0.$seconds")
        if (-Not $output.Contains("Project published successfully."))
        {
          throw "Pack failed: " + $output  
        }
      }

      $project = (get-content "$projectPath" | ConvertFrom-Json)
      $project.name = $project.name.Replace("_portable", "").Replace("_windows", "") + "_windows"
      Write-Host "Pack for windows " + $project.name
      $project.targetFramework = "Windows"
      $project | ConvertTo-JSon | Out-File  "$projectPath"

      $output = (& "C:/Program Files/UiPath/Studio/UiPath.Studio.CommandLine.exe" publish -p "$projectPath" -f "$(IntegrationTestStudioPackPath)" -v "$env:BUILD_BUILDID.0.$seconds")

      if (-Not $output.Contains("Project published successfully."))
      {
        echo "Sleep 1 minute"
        Start-Sleep -Seconds 60
        $output = (& "C:/Program Files/UiPath/Studio/UiPath.Studio.CommandLine.exe" publish -p "$projectPath" -f "$(IntegrationTestStudioPackPath)" -v "$env:BUILD_BUILDID.0.$seconds")
        if (-Not $output.Contains("Project published successfully."))
        {
          throw "Pack failed: " + $output  
        }
      }
    displayName: "Pack runtime tests project using UiPath.Studio.CommandLine.exe"
    failOnStderr: true

  - task: PublishBuildArtifacts@1
    displayName: "Publish packed tests"
    inputs:
      PathToPublish: "$(IntegrationTestStudioPackPath)"
      ArtifactName: "Packages"
      ArtifactType: "Container"
