<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Algorithm" xml:space="preserve">
    <value>Algorithme</value>
  </data>
  <data name="DecryptFileEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé.</value>
  </data>
  <data name="DecryptFileInputPathDescription" xml:space="preserve">
    <value>Chemin d’accès du fichier qui sera déchiffré par cette activité.</value>
  </data>
  <data name="DecryptFileKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour le déchiffrement du fichier d’entrée.</value>
  </data>
  <data name="DecryptFileOutputPathDescription" xml:space="preserve">
    <value>Chemin d’accès d’enregistrement du fichier.</value>
  </data>
  <data name="DecryptTextEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé et la chaîne d’entrée.</value>
  </data>
  <data name="DecryptTextInputDescription" xml:space="preserve">
    <value>Chaîne qui sera déchiffrée par cette activité.</value>
  </data>
  <data name="DecryptTextKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour le déchiffrement de la chaîne d’entrée.</value>
  </data>
  <data name="DecryptTextResultDescription" xml:space="preserve">
    <value>Chaîne déchiffrée.</value>
  </data>
  <data name="Encoding" xml:space="preserve">
    <value>Encodage</value>
  </data>
  <data name="EncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la chaîne d’entrée.</value>
  </data>
  <data name="EncryptFileEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé.</value>
  </data>
  <data name="EncryptFileInputPathDescription" xml:space="preserve">
    <value>Chemin d’accès du fichier qui sera chiffré par cette activité.</value>
  </data>
  <data name="EncryptFileKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour le chiffrement du fichier d’entrée.</value>
  </data>
  <data name="EncryptFileOutputPathDescription" xml:space="preserve">
    <value>Chemin d’accès d’enregistrement du fichier chiffré.</value>
  </data>
  <data name="EncryptTextEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé et la chaîne d’entrée.</value>
  </data>
  <data name="EncryptTextInputDescription" xml:space="preserve">
    <value>Chaîne qui sera chiffrée par cette activité.</value>
  </data>
  <data name="EncryptTextKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour le chiffrement de la chaîne d’entrée.</value>
  </data>
  <data name="EncryptTextResultDescription" xml:space="preserve">
    <value>Représentation de la chaîne Base64 de la chaîne d’entrée chiffrée.</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>Chemin du fichier</value>
    <comment>property name</comment>
  </data>
  <data name="FilePathDialogTitle" xml:space="preserve">
    <value>Chemin du fichier</value>
  </data>
  <data name="HashFilePathDescription" xml:space="preserve">
    <value>Chemin d’accès du fichier qui sera déchiffré par cette activité.</value>
  </data>
  <data name="HashFileResultDescription" xml:space="preserve">
    <value>Représentation de la chaîne hexadécimale du fichier haché.</value>
  </data>
  <data name="HashTextInputDescription" xml:space="preserve">
    <value>Chaîne qui sera hachée par cette activité.</value>
  </data>
  <data name="HashTextResultDescription" xml:space="preserve">
    <value>Représentation de la chaîne hexadécimale de la chaîne d’entrée hachée.</value>
  </data>
  <data name="InputFilePath" xml:space="preserve">
    <value>Chemin d&apos;entrée</value>
    <comment>property name</comment>
  </data>
  <data name="InputString" xml:space="preserve">
    <value>Texte</value>
    <comment>property name</comment>
  </data>
  <data name="Key" xml:space="preserve">
    <value>Clé</value>
  </data>
  <data name="KeyedHashEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé et la chaîne d’entrée.</value>
  </data>
  <data name="KeyedHashFileEncodingDescription" xml:space="preserve">
    <value>Encodage utilisé pour l’interprétation de la clé.</value>
  </data>
  <data name="KeyedHashFileKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour hacher le fichier fourni.</value>
  </data>
  <data name="KeyedHashFileResultDescription" xml:space="preserve">
    <value>Représentation de la chaîne hexadécimale du fichier haché.</value>
  </data>
  <data name="KeyedHashKeyDescription" xml:space="preserve">
    <value>Clé utilisée pour hacher la chaîne d’entrée.</value>
  </data>
  <data name="KeyEncoding" xml:space="preserve">
    <value>Encodage de la clé</value>
  </data>
  <data name="OutputFilePath" xml:space="preserve">
    <value>Chemin de sortie</value>
    <comment>property name</comment>
  </data>
  <data name="Overwrite" xml:space="preserve">
    <value>Écraser</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>Résultat</value>
  </data>
  <data name="CategoryCryptography" xml:space="preserve">
    <value>Cryptographie</value>
  </data>
  <data name="CategorySystem" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>NomComplet</value>
    <comment>property name</comment>
  </data>
  <data name="ContinueOnError" xml:space="preserve">
    <value>ContinuerSurErreur</value>
  </data>
</root>