<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CodeDescription" xml:space="preserve">
    <value>Python 脚本内容</value>
  </data>
  <data name="CodeNameDisplayName" xml:space="preserve">
    <value>代码</value>
    <comment>property name</comment>
  </data>
  <data name="ConvertException" xml:space="preserve">
    <value>转换 Python 对象时出错</value>
  </data>
  <data name="Do" xml:space="preserve">
    <value>执行</value>
  </data>
  <data name="GetObjectDescription" xml:space="preserve">
    <value>从 Python 对象获取 .NET 类型</value>
  </data>
  <data name="GetObjectNameDisplayName" xml:space="preserve">
    <value>获取 Python 对象</value>
    <comment>activity name</comment>
  </data>
  <data name="GetObjectResultDescription" xml:space="preserve">
    <value>与 Python 对象对应的 .NET 类型</value>
  </data>
  <data name="Input" xml:space="preserve">
    <value>输入</value>
  </data>
  <data name="InstanceDescription" xml:space="preserve">
    <value>Python 对象实例</value>
  </data>
  <data name="InstanceNameDisplayName" xml:space="preserve">
    <value>实例</value>
    <comment>property name</comment>
  </data>
  <data name="InvalidMethodNameException" xml:space="preserve">
    <value>方法名称无效</value>
  </data>
  <data name="InvalidPathException" xml:space="preserve">
    <value>指定的 Python 路径无效: {0}</value>
  </data>
  <data name="InvokeException" xml:space="preserve">
    <value>调用 Python 方法时出错</value>
  </data>
  <data name="InvokeMethodDescription" xml:space="preserve">
    <value>调用 Python 方法</value>
  </data>
  <data name="InvokeMethodNameDisplayName" xml:space="preserve">
    <value>调用 Python 方法</value>
    <comment>activity name</comment>
  </data>
  <data name="LoadScriptDescription" xml:space="preserve">
    <value>加载并运行 Python 脚本</value>
  </data>
  <data name="LoadScriptException" xml:space="preserve">
    <value>加载 Python 脚本时出错</value>
  </data>
  <data name="LoadScriptNameDisplayName" xml:space="preserve">
    <value>加载 Python 脚本</value>
    <comment>activity name</comment>
  </data>
  <data name="MethodNameDescription" xml:space="preserve">
    <value>要调用的方法名称</value>
  </data>
  <data name="NameDisplayName" xml:space="preserve">
    <value>名称</value>
    <comment>property name</comment>
  </data>
  <data name="NoScriptSpecifiedException" xml:space="preserve">
    <value>未指定代码/脚本</value>
  </data>
  <data name="OutputDisplayName" xml:space="preserve">
    <value>输出</value>
    <comment>property name</comment>
  </data>
  <data name="ParametersDescription" xml:space="preserve">
    <value>Python 脚本的输入参数</value>
  </data>
  <data name="ParametersNameDisplayName" xml:space="preserve">
    <value>输入参数</value>
    <comment>property name</comment>
  </data>
  <data name="PathDescription" xml:space="preserve">
    <value>Python 主页路径</value>
  </data>
  <data name="PathNameDisplayName" xml:space="preserve">
    <value>路径</value>
    <comment>property name</comment>
  </data>
  <data name="PythonEngineNotFoundException" xml:space="preserve">
    <value>找不到 Python 引擎会话</value>
  </data>
  <data name="PythonInitializeException" xml:space="preserve">
    <value>初始化 Python 引擎时出错</value>
  </data>
  <data name="PythonObjectDescription" xml:space="preserve">
    <value>要从中提取值的 Python 对象</value>
  </data>
  <data name="PythonObjectNameDisplayName" xml:space="preserve">
    <value>Python 对象</value>
    <comment>property name</comment>
  </data>
  <data name="PythonScopeDescription" xml:space="preserve">
    <value>Python 活动容器</value>
  </data>
  <data name="PythonScopeNameDisplayName" xml:space="preserve">
    <value>Python 作用域</value>
    <comment>activity name</comment>
  </data>
  <data name="ResultDescription" xml:space="preserve">
    <value>脚本调用结果</value>
  </data>
  <data name="ResultNameDisplayName" xml:space="preserve">
    <value>结果</value>
    <comment>property name</comment>
  </data>
  <data name="RunScriptDescription" xml:space="preserve">
    <value>调用 Python 脚本活动</value>
  </data>
  <data name="RunScriptException" xml:space="preserve">
    <value>运行 Python 脚本时出错</value>
  </data>
  <data name="RunScriptNameDisplayName" xml:space="preserve">
    <value>运行 Python 脚本</value>
    <comment>activity name</comment>
  </data>
  <data name="ScriptFileDescription" xml:space="preserve">
    <value>Python 脚本文件的完整路径</value>
  </data>
  <data name="ScriptFileNameDisplayName" xml:space="preserve">
    <value>文件</value>
    <comment>property name</comment>
  </data>
  <data name="ScriptFileNotFoundException" xml:space="preserve">
    <value>找不到指定的脚本文件</value>
  </data>
  <data name="TargetPlatformDisplayName" xml:space="preserve">
    <value>目标</value>
    <comment>property name</comment>
  </data>
  <data name="TargetPlatformDescription" xml:space="preserve">
    <value>指定 Python 运行时平台</value>
  </data>
  <data name="ValidateParentError" xml:space="preserve">
    <value>活动仅在“{0}”内有效</value>
  </data>
  <data name="VersionDescription" xml:space="preserve">
    <value>Python 版本</value>
  </data>
  <data name="VersionNameDisplayName" xml:space="preserve">
    <value>版本</value>
    <comment>property name</comment>
  </data>
  <data name="Output" xml:space="preserve">
    <value>输出</value>
  </data>
  <data name="WorkingFolder" xml:space="preserve">
    <value>工作文件夹</value>
    <comment>property name</comment>
  </data>
  <data name="WorkingFolderDescription" xml:space="preserve">
    <value>用于指定在当前作用域内执行的脚本的工作文件夹</value>
  </data>
  <data name="WorkingFolderPathInvalid" xml:space="preserve">
    <value>工作文件夹路径无效</value>
  </data>
  <data name="InvalidVersionException" xml:space="preserve">
    <value>选定版本 {0} 不同于已找到的版本 {1}</value>
  </data>
  <data name="OperationTimeout" xml:space="preserve">
    <value>超时</value>
  </data>
  <data name="OperationTimeoutDescription" xml:space="preserve">
    <value>在遭到终止及引发异常前，允许 Python 脚本运行的时长。</value>
  </data>
  <data name="LibraryPathDescription" xml:space="preserve">
    <value>Python libpython*.so 的路径包括库名称在内的库</value>
  </data>
  <data name="LibraryPathNameDisplayName" xml:space="preserve">
    <value>库路径 (仅适用于 Linux)</value>
  </data>
</root>